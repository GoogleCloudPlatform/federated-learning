# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
apiVersion: v1
kind: Namespace
metadata:
  name: istio-ingress
  labels:
    tenant-ns: "false"
    # Allow Anthos Service Mesh to manage the workloads in the namespace
    # Ref: https://cloud.google.com/service-mesh/docs/managed/select-a-release-channel#injection_labels
    istio.io/rev: asm-managed
...
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: istio-ingressgateway
  namespace: istio-ingress
spec:
  maxReplicas: 5
  minReplicas: 3
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: istio-ingressgateway
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
...
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: istio-ingressgateway
  namespace: istio-ingress
spec:
  replicas: 3
  selector:
    matchLabels:
      app: istio-ingressgateway
      istio: ingressgateway
  strategy:
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  template:
    metadata:
      annotations:
        # This is required to tell Anthos Service Mesh to inject the gateway with the
        # required configuration.
        inject.istio.io/templates: gateway
      labels:
        app: istio-ingressgateway
        istio: ingressgateway
    spec:
      serviceAccountName: istio-ingressgateway
      containers:
        - name: istio-proxy
          image: auto # The image will automatically update each time the pod starts.
          resources:
            limits:
              cpu: 2000m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 128Mi
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: cloud.google.com/gke-nodepool
                    operator: In
                    values:
                      - "main-pool"
...
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: istio-ingressgateway
  namespace: istio-ingress
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: istio-ingressgateway
      istio: ingressgateway
...
---
# Role and RoleBinding allow the gateway to access certificates
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: istio-ingressgateway
  namespace: istio-ingress
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "watch", "list"]
...
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: istio-ingressgateway
  namespace: istio-ingress
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: istio-ingressgateway
subjects:
  - kind: ServiceAccount
    name: istio-ingressgateway
...
---
apiVersion: v1
kind: Service
metadata:
  name: istio-ingressgateway
  namespace: istio-ingress
  labels:
    app: istio-ingressgateway
    istio: ingressgateway
spec:
  ports:
    # status-port exposes a /healthz/ready endpoint that can be used with GKE Ingress health checks
    - name: status-port
      port: 15021
      protocol: TCP
      targetPort: 15021
    # Any ports exposed in Gateway resources should be exposed here.
    # Uncomment if you need to expose HTTP traffic on port 80
    # - name: http2
    #   port: 80
    # Uncomment if you need to expose HTTPS traffic on port 443
    # - name: https
    #   port: 443
    # We use this gRPC port in examples
    - name: grpc
      port: 8000
  selector:
    istio: ingressgateway
    app: istio-ingressgateway
  type: LoadBalancer
...
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: istio-ingressgateway
  namespace: istio-ingress
...
---
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: ingress-gateway
  namespace: istio-ingress
spec:
  selector:
    istio: ingressgateway
  servers:
    # Uncomment if you need to expose HTTP traffic on port 80.
    # - port:
    #     number: 80
    #     name: http2
    #     protocol: http2
    #   hosts:
    #     - "*"
    # Uncomment if you need to expose HTTPS traffic on port 443.
    # You also need to configure TLS settings.
    # Ref: https://istio.io/latest/docs/reference/config/networking/gateway/
    # Ref: https://istio.io/latest/docs/tasks/traffic-management/ingress/secure-ingress/
    # - port:
    #     number: 443
    #     name: https
    #     protocol: https
    #   hosts:
    #     - "*"
    # We use this gRPC port in examples
    - port:
        number: 8000
        name: grpc
        protocol: GRPC
      hosts:
        - "*"
...
